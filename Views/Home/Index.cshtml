@model (List<v_try.Models.Subject>, List<v_try.Models.Topic>, List<v_try.Models.Subtopic>)

@{
    ViewData["Title"] = "Learning Management System";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Learning Management System</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
        }

        .container {
            max-width: 900px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px #ccc;
        }

        h2 {
            text-align: center;
        }

        label {
            font-weight: bold;
        }

        .input-group {
            margin: 10px 0;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        th {
            background-color: #007BFF;
            color: white;
        }

        button {
            padding: 8px 12px;
            margin: 10px 5px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }

        .btn-add {
            background-color: green;
            color: white;
        }

        .btn-save {
            background-color: blue;
            color: white;
        }

        .btn-cancel {
            background-color: red;
            color: white;
        }

        .btn-delete {
            background-color: darkred;
            color: white;
        }

        input[type=text] {
            width: 95%;
            padding: 5px;
        }
    </style>
</head>
<body>

    <div class="container">
        <h2>Learning Management System</h2>

        <!-- Add New Subject -->
        <div class="input-group">
            <label>Add New Subject:</label>
            <input type="text" id="subjectName" placeholder="Enter Subject Name">
            <button class="btn-add" onclick="addSubject()">+ Add Subject</button>
        </div>

        <!-- Subjects Table -->
        <h3>Subjects</h3>
        <table id="subjectTable">
            <thead>
                <tr>
                    <th>Subject Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subject in Model.Item1)
                {
                    <tr>
                        <td>@subject.SubjectName</td>
                        <td>
                            <button class="btn-delete" onclick="deleteSubject(@subject.Id)">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Add New Topic -->
        <div class="input-group">
            <label>Add New Topic:</label>
            <input type="text" id="topicName" placeholder="Enter Topic Name">
            <select id="subjectId">
                @foreach (var subject in Model.Item1)
                {
                    <option value="@subject.Id">@subject.SubjectName</option>
                }
            </select>
            <button class="btn-add" onclick="addTopic()">+ Add Topic</button>
        </div>

        <!-- Topics Table -->
        <h3>Topics</h3>
        <table id="topicTable">
            <thead>
                <tr>
                    <th>Topic Name</th>
                    <th>Subject</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var topic in Model.Item2)
                {
                    <tr>
                        <td>@topic.TopicName</td>
                        <td>@topic.Subject?.SubjectName</td>
                        <td>
                            <button class="btn-delete" onclick="deleteTopic(@topic.Id)">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Add New Subtopic -->
        <div class="input-group">
            <label>Add New Subtopic:</label>
            <input type="text" id="subtopicName" placeholder="Enter Subtopic Name">
            <select id="topicId">
                @foreach (var topic in Model.Item2)
                {
                    <option value="@topic.Id">@topic.TopicName</option>
                }
            </select>
            <button class="btn-add" onclick="addSubtopic()">+ Add Subtopic</button>
        </div>

        <!-- Subtopics Table -->
        <h3>Subtopics</h3>
        <table id="subtopicTable">
            <thead>
                <tr>
                    <th>Subtopic Name</th>
                    <th>Topic</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subtopic in Model.Item3)
                {
                    <tr>
                        <td>@subtopic.SubtopicName</td>
                        <td>@subtopic.Topic?.TopicName</td>
                        <td>
                            <button class="btn-delete" onclick="deleteSubtopic(@subtopic.Id)">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <script>
        // Add Subject
        function addSubject() {
            const subjectName = document.getElementById("subjectName").value;
            if (subjectName) {
                fetch("/Subject/Create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ SubjectName: subjectName }),
                })
                .then(response => {
                    if (response.ok) {
                        location.reload(); // Refresh the page to show the new subject
                    }
                });
            }
        }

        // Delete Subject
        function deleteSubject(subjectId) {
            if (confirm("Are you sure you want to delete this subject?")) {
                fetch(`/Subject/Delete/${subjectId}`, {
                    method: "POST",
                })
                .then(response => {
                    if (response.ok) {
                        location.reload(); // Refresh the page to reflect the deletion
                    }
                });
            }
        }

        // Add Topic

                // Add Topic
                function addTopic() {
            const topicName = document.getElementById("topicName").value;
            const subjectId = document.getElementById("subjectId").value;

            fetch("/Home/AddTopic", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    Name: topicName,
                    SubjectId: parseInt(subjectId)
                }),
            })
            .then(response => {
                if (!response.ok) throw new Error("Failed to add topic");
                location.reload();
            })
            .catch(error => alert(error.message));
        }

        // Add Subtopic
               function addSubtopic() {
            const subtopicName = document.getElementById("subtopicName").value;
            const topicId = document.getElementById("topicId").value;
            if (subtopicName && topicId) {
                fetch("/Subtopic/Create", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ Name: subtopicName, TopicId: parseInt(topicId) }),
                })
                .then(response => response.ok ? location.reload() : console.error("Failed to add subtopic"))
                .catch(error => console.error("Error:", error));
            }
        }
        // Delete Topic
        function deleteTopic(topicId) {
            if (confirm("Are you sure you want to delete this topic?")) {
                fetch(`/Topic/Delete/${topicId}`, {
                    method: "POST",
                })
                .then(response => {
                    if (response.ok) {
                        location.reload(); Refresh the page to reflect the deletion
                    }
                });
            }
        }

        // Add Subtopic
      

        // Delete Subtopic
        function deleteSubtopic(subtopicId) {
            if (confirm("Are you sure you want to delete this subtopic?")) {
                fetch(`/Subtopic/Delete/${subtopicId}`, {
                    method: "POST",
                })
                .then(response => {
                    if (response.ok) {
                        location.reload(); // Refresh the page to reflect the deletion
                    }
                });
            }
        }
    </script>

</body>
</html>